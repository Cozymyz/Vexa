// Automatically generated Vue component - {{ component_name }}.vue
// Generation time: {{ now }}
// modules: {{ modules }}

<template>
<!-- Add component UI code here -->
</template>

<script lang="ts">
// Module configuration (exposed to vuexLazyLoad plugin)
export default {
  vuexModule: [
    {% for module in modules %}
    {
        name: '{{ module.name }}',
        extent: '{{ module.extent }}'
    }{% if not loop.last %},{% endif %}
    {% endfor %}
  ]
}
</script>

<script setup lang="ts">
import { onMounted } from 'vue'
import { useStore } from 'vuex'

// Defining Interface
{% for module in modules %}
interface {{ module.name }} {
    {% for field_name, field_type in module.fields.items() %}
    {{ field_name }}: {{ field_type }}{% if not loop.last %}, {% endif %}
    {% endfor %}
}
{% endfor %}

// Module configuration (defined in setup)
const vuexModules = [
    {% for module in modules %}
    {
        name: '{{ module.name }}',
        extent: '{{ module.extent }}'
    }{% if not loop.last %},{% endif %}
    {% endfor %}
]

const store = useStore()

// Generic function to wait for a module to load
const waitForModule = (moduleName: string, timeout = 2000) => {
    return new Promise<void>((resolve, reject) => {
        const checkInterval = 50 // check every 50ms
        let elapsed = 0

        const interval = setInterval(() => {
            if (store.hasModule(moduleName)) {
                clearInterval(interval)
                resolve()
            } else {
                elapsed += checkInterval
                if (elapsed >= timeout) {
                    clearInterval(interval)
                    reject(new Error(`Waiting for module timeout: ${moduleName}`))
                }
            }
        }, checkInterval)
    })
}

// Create fetch functions for each module
{% for module in modules %}
const {{ module.fetch_action }} = async () => {
    const moduleName = '{{ module.name }}'
    try {
        await waitForModule(moduleName)
        await store.dispatch(`${moduleName}/{{ module.fetch_action }}`)
    } catch (error) {
        console.error(`Error loading module ${moduleName}: ${error.message}`)
        throw error
    }
}
{% endfor %}

// Load all module data on mount
onMounted(() => {
    fetchAllModules()
})

// Get all module data in parallel
const fetchAllModules = async () => {
    try {
        await Promise.all([
            {% for module in modules %}
            {{ module.fetch_action }}(){% if not loop.last %},{% endif %}
            {% endfor %}
        ])
        console.log('All modules data loaded successfully')
    } catch (error) {
        console.error('Error loading one or more modules:', error)
    }
}
</script>